// Copyright 2018 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * The Nakama server RPC protocol for games and apps.
 */
syntax = "proto3";

package rearward.api;

import "google/protobuf/empty.proto";
import "api.proto";

/**
 * The Rearward RPC protocol service built with GRPC.
 */
service RearwardService {
  // Add friends by ID or username to a user's account.
  rpc AddFriends (AddFriendsRequest) returns (google.protobuf.Empty);

  // Add users to a group.
  rpc AddGroupUsers (AddGroupUsersRequest) returns (google.protobuf.Empty);
  // Authenticate a user with a custom id against the server.
  rpc AuthenticateCustom (AuthenticateCustomRequest) returns (Session);

  // Authenticate a user with a device id against the server.
  rpc AuthenticateDevice (AuthenticateDeviceRequest) returns (Session);
  // Authenticate a user with an email+password against the server.
  rpc AuthenticateEmail (AuthenticateEmailRequest) returns (Session);

  // Authenticate a user with a Facebook OAuth token against the server.
  rpc AuthenticateFacebook (AuthenticateFacebookRequest) returns (Session);

  // Authenticate a user with Apple's GameCenter against the server.
  rpc AuthenticateGameCenter (AuthenticateGameCenterRequest) returns (Session);

  // Authenticate a user with Google against the server.
  rpc AuthenticateGoogle (AuthenticateGoogleRequest) returns (Session);

  // Authenticate a user with Steam against the server.
  rpc AuthenticateSteam (AuthenticateSteamRequest) returns (Session);

  // Block one or more users by ID or username.
  rpc BlockFriends (BlockFriendsRequest) returns (google.protobuf.Empty);

  // Create a new group with the current user as the owner.
  rpc CreateGroup (CreateGroupRequest) returns (Group);

  // Delete one or more users by ID or username.
  rpc DeleteFriends (DeleteFriendsRequest) returns (google.protobuf.Empty);
  // Delete a group by ID.
  rpc DeleteGroup (DeleteGroupRequest) returns (google.protobuf.Empty);
  // Delete a leaderboard record.
  rpc DeleteLeaderboardRecord (DeleteLeaderboardRecordRequest) returns (google.protobuf.Empty);

  // Delete one or more notifications for the current user.
  rpc DeleteNotifications (DeleteNotificationsRequest) returns (google.protobuf.Empty);

  // Delete one or more objects by ID or username.
  rpc DeleteStorageObjects (DeleteStorageObjectsRequest) returns (google.protobuf.Empty);

  // Fetch the current user's account.
  rpc GetAccount (google.protobuf.Empty) returns (Account);

  // Fetch zero or more users by ID and/or username.
  rpc GetUsers (GetUsersRequest) returns (Users);

  // A healthcheck which load balancers can use to check the service.
  rpc Healthcheck (google.protobuf.Empty) returns (google.protobuf.Empty);

  // Import Facebook friends and add them to a user's account.
  rpc ImportFacebookFriends (ImportFacebookFriendsRequest) returns (google.protobuf.Empty);

  // Immediately join an open group, or request to join a closed one.
  rpc JoinGroup (JoinGroupRequest) returns (google.protobuf.Empty);

  // Attempt to join an open and running tournament.
  rpc JoinTournament (JoinTournamentRequest) returns (google.protobuf.Empty);

  // Kick a set of users from a group.
  rpc KickGroupUsers (KickGroupUsersRequest) returns (google.protobuf.Empty);

  // Leave a group the user is a member of.
  rpc LeaveGroup (LeaveGroupRequest) returns (google.protobuf.Empty);

  // Add a custom ID to the social profiles on the current user's account.
  rpc LinkCustom (AccountCustom) returns (google.protobuf.Empty);

  // Add a device ID to the social profiles on the current user's account.
  rpc LinkDevice (AccountDevice) returns (google.protobuf.Empty);

  // Add an email+password to the social profiles on the current user's account.
  rpc LinkEmail (AccountEmail) returns (google.protobuf.Empty);

  // Add Facebook to the social profiles on the current user's account.
  rpc LinkFacebook (LinkFacebookRequest) returns (google.protobuf.Empty);

  // Add Apple's GameCenter to the social profiles on the current user's account.
  rpc LinkGameCenter (AccountGameCenter) returns (google.protobuf.Empty);

  // Add Google to the social profiles on the current user's account.
  rpc LinkGoogle (AccountGoogle) returns (google.protobuf.Empty);

  // Add Steam to the social profiles on the current user's account.
  rpc LinkSteam (AccountSteam) returns (google.protobuf.Empty);

  // List a channel's message history.
  rpc ListChannelMessages (ListChannelMessagesRequest) returns (ChannelMessageList);

  // List all friends for the current user.
  rpc ListFriends (ListFriendsRequest) returns (FriendList);
  // List groups based on given filters.
  rpc ListGroups (ListGroupsRequest) returns (GroupList);

  // List all users that are part of a group.
  rpc ListGroupUsers (ListGroupUsersRequest) returns (GroupUserList);

  // List leaderboard records.
  rpc ListLeaderboardRecords (ListLeaderboardRecordsRequest) returns (LeaderboardRecordList);

  // List leaderboard records that belong to a user.
  rpc ListLeaderboardRecordsAroundOwner (ListLeaderboardRecordsAroundOwnerRequest) returns (LeaderboardRecordList);

  // Fetch list of running matches.
  rpc ListMatches (ListMatchesRequest) returns (MatchList);

  // Fetch list of notifications.
  rpc ListNotifications (ListNotificationsRequest) returns (NotificationList);

  // List publicly readable storage objects in a given collection.
  rpc ListStorageObjects (ListStorageObjectsRequest) returns (StorageObjectList);

  // List current or upcoming tournaments.
  rpc ListTournaments (ListTournamentsRequest) returns (TournamentList);

  // List tournament records.
  rpc ListTournamentRecords (ListTournamentRecordsRequest) returns (TournamentRecordList);

  // List tournament records for a given owner.
  rpc ListTournamentRecordsAroundOwner (ListTournamentRecordsAroundOwnerRequest) returns (TournamentRecordList);

  // List groups the current user belongs to.
  rpc ListUserGroups (ListUserGroupsRequest) returns (UserGroupList);

  // Promote a set of users in a group to the next role up.
  rpc PromoteGroupUsers (PromoteGroupUsersRequest) returns (google.protobuf.Empty);

  // Get storage objects.
  rpc ReadStorageObjects (ReadStorageObjectsRequest) returns (StorageObjects);

  // Execute a Lua function on the server.
  rpc RpcFunc (Rpc) returns (Rpc);

  // Remove the custom ID from the social profiles on the current user's account.
  rpc UnlinkCustom (AccountCustom) returns (google.protobuf.Empty);

  // Remove the device ID from the social profiles on the current user's account.
  rpc UnlinkDevice (AccountDevice) returns (google.protobuf.Empty);

  // Remove the email+password from the social profiles on the current user's account.
  rpc UnlinkEmail (AccountEmail) returns (google.protobuf.Empty);

  // Remove Facebook from the social profiles on the current user's account.
  rpc UnlinkFacebook (AccountFacebook) returns (google.protobuf.Empty);

  // Remove Apple's GameCenter from the social profiles on the current user's account.
  rpc UnlinkGameCenter (AccountGameCenter) returns (google.protobuf.Empty);

  // Remove Google from the social profiles on the current user's account.
  rpc UnlinkGoogle (AccountGoogle) returns (google.protobuf.Empty);

  // Remove Steam from the social profiles on the current user's account.
  rpc UnlinkSteam (AccountSteam) returns (google.protobuf.Empty);

  // Update fields in the current user's account.
  rpc UpdateAccount (UpdateAccountRequest) returns (google.protobuf.Empty);

  // Update fields in a given group.
  rpc UpdateGroup (UpdateGroupRequest) returns (google.protobuf.Empty);

  // Write a record to a leaderboard.
  rpc WriteLeaderboardRecord (WriteLeaderboardRecordRequest) returns (LeaderboardRecord);

  // Write objects into the storage engine.
  rpc WriteStorageObjects (WriteStorageObjectsRequest) returns (StorageObjectAcks);

  // Write a record to a tournament.
  rpc WriteTournamentRecord (WriteTournamentRecordRequest) returns (LeaderboardRecord);
}
